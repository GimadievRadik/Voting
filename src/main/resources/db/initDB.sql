DROP TABLE USER_ROLE IF EXISTS;
DROP TABLE VOTE IF EXISTS;
DROP TABLE USER IF EXISTS;
DROP TABLE DISH IF EXISTS;
DROP TABLE RESTAURANT IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq AS INTEGER START WITH 100000;

CREATE TABLE USER
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  email            VARCHAR(255)            NOT NULL,
  password         VARCHAR(255)            NOT NULL,
  registered       TIMESTAMP DEFAULT now() NOT NULL,
  enabled          BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX user_unique_email_idx
  ON USER (email);

CREATE TABLE USER_ROLE
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_role_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USER (id) ON DELETE CASCADE
);

CREATE TABLE RESTAURANT
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    name    VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX rest_unique_name ON RESTAURANT (name);

CREATE TABLE DISH
(
  id            INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
  date          DATE DEFAULT TODAY          NOT NULL,
  description   VARCHAR(255)                NOT NULL,
  price         INTEGER                     NOT NULL,
  rest_id       INTEGER                     NOT NULL,
  FOREIGN KEY (rest_id) REFERENCES RESTAURANT (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX dish_unique_rest_description_date_idx
  ON DISH (rest_id, description, date);

CREATE TABLE VOTE
(
    id          INTEGER GENERATED BY DEFAULT AS SEQUENCE global_seq PRIMARY KEY,
    date        DATE DEFAULT TODAY      NOT NULL,
    user_id     INTEGER                 NOT NULL,
    rest_id     INTEGER                 NOT NULL,
    FOREIGN KEY (user_id) REFERENCES USER (id) ON DELETE CASCADE,
    FOREIGN KEY (rest_id) REFERENCES RESTAURANT (id)
);
CREATE UNIQUE INDEX vote_unique_user_date_idx ON VOTE (user_id, date);